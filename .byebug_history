q
bundle
tiv_temp.collect{|t| p t}
tiv_temp
q
n
q
c
job_histories
job_histories.collect{|x| x.elapsed_time[3..4]}
c
 File.readlines(File.join(Rails.public_path, ('live_tiv_data_'+ workstation +'.txt'))).count
 File.readlines(File.join(Rails.public_path, ('live_tiv_data_'+ workstation +'.txt'))).last(10).count
 File.readlines(File.join(Rails.public_path, ('live_tiv_data_'+ workstation +'.txt'))).last(10)
c
line_splitted[6].split("m")[0].split("h")[1].to_i > 15
line_splitted[6].split("m")[0].split("h")[0].to_i > 1
line_splitted[6].split("m")[0].split("h")
line_splitted[6].split("m")[0]
line_splitted[6].split("m")
line_splitted[6].split("h").split("m")
line_splitted[6].split(":")
line_splitted[6].to_time
line_splitted[6]
line_splitted
c
line_splitted[0][c
line_splitted[0]
line_splitted[0][0.3]
line_splitted[0][0.2]
line_splitted[0]line_splitted[0][0.2]
line_splitted
c
line_splitted
c
File.readlines(File.join(Rails.public_path, ('live_tiv_data_'+ workstation +'.txt')))
File.readlines(File.join(Rails.public_path, ('live_tiv_data'+ workstation +'.txt')))
File.readlines(File.join(Rails.public_path, 'live_tiv_data', workstation, '.txt'))
File.join(Rails.public_path, 'live_tiv_data', workstation, '.txt')
File.readlines
OFFile.join(Rails.public_path, 'live_tiv_data', workstation, '.txt')
Rails.public_path, 'live_tiv_data', workstation, '.txt'
'live_tiv_data'+ workstation +'.txt'
workstation
Rails.public_path, 'live_tiv_data'+ workstation +'.txt'
c
File.readlines(File.join(directory, 'live_dsd_data.txt')).collect{|c| c.gsub!("\t\t", "").gsub!("\n", "").split("\t")[1..10]}
File.readlines(File.join(directory, 'live_dsd_data.txt')).collect{|c| c.gsub!("\t\t", nil).gsub!("\n", nil).split("\t")[1..10]}
File.readlines(File.join(directory, 'live_dsd_data.txt')).collect
File.readlines(File.join(directory, 'live_dsd_data.txt')).first
File.readlines(File.join(directory, 'live_dsd_data.txt'))
File.readlines(File.join(directory, 'live_dsd_data.txt
File.readlines(File.join(directory, 'live_dsd_data.txt')).readlines
File.readlines(File.join(directory, 'live_dsd_data.txt')).count
File.readlines(File.join(directory, 'live_dsd_data.txt')).first.gsub!("\t\t", "\t").split("\n").collect{|c| c.split("\t")[1..10]}
File.readlines(File.join(directory, 'live_dsd_data.txt')).gsub!("\t\t", "\t").split("\n").collect{|c| c.split("\t")[1..10]}
File.readlines(File.join(directory, 'live_dsd_data.txt'))
c
args
q
args
c
javascript_include_tag("ui/#{params[:controller]}")
params[:controller]
c
tivoli_job.tivoli_histories.collect(&:elapsed_time)
tivoli_job.tivoli_histories.collect{|x| x.start_datetime.strftime('%m/%d')}
c
tivoli_job.tivoli_histories.collect(&:elapsed_time)
tivoli_job.tivoli_histories.collect(:&elapsed_time)
tivoli_job.tivoli_histories.collect(:elapsed_time)
tivoli_job.tivoli_histories.pluck(:elapsed_time)
 tivoli_job.tivoli_histories.collect{|x| x.start_datetime.strftime('%m/%d')} 
c
tivoli_job.tivoli_histories.collect{|x| x.start_datetime.strftime('%m/%d')}
tivoli_job.tivoli_histories.pluck(:start_datetime).strftime("%m/%d")
c
tivoli_job.tivoli_histories.pluck(:elapsed_time)
tivoli_job.tivoli_histories.pluck(:start_datetime)
c
params
c
params
tivoli_job
c
params
param
TivoliJob.first
params
tivoli_job
c
tivoli_job.tivoli_histories.group_by_week(:start_datetime).count
tivoli_job.tivoli_histories.group_by_week_day(:start_datetime).count
tivoli_job.tivoli_histories.group_by_weekday(:start_datetime).count
tivoli_job.tivoli_histories.group_by_day(:start_datetime).count
tivoli_job.tivoli_histories.group(:start_datetime).count
c
tivoli_job.tivoli_histories.group(:elapsed_time).count
c
tivoli_job.tivoli_histories.group(:elapsed_time).count
c
tivoli_job.tivoli_histories.pluck(:start_datetime, :elapsed_time)
c
tivoli_job.tivoli_histories.group_by_day(:start_datetime).count
tivoli_job.tivoli_histories.group(:start_datetime).count
 tivoli_job.tivoli_histories.select(:start_datetime, :elapsed_time).map{|p|{ "#{p.start_datetime.strftime('%m/%d')}": p.elapsed_time[0..1].to_i*3600+p.elapsed_time[3..4].to_i*60+p.elapsed_time[6..7].to_i }}
 tivoli_job.tivoli_histories.select(:start_datetime, :elapsed_time).map{|p|{ "#{p.start_datetime.strftime('%m/%d')}".to_sym: p.elapsed_time[0..1].to_i*3600+p.elapsed_time[3..4].to_i*60+p.elapsed_time[6..7].to_i }}
 tivoli_job.tivoli_histories.select(:start_datetime, :elapsed_time).map{|p|{ p.start_datetime.strftime('%m/%d').to_sym: p.elapsed_time[0..1].to_i*3600+p.elapsed_time[3..4].to_i*60+p.elapsed_time[6..7].to_i }}
 tivoli_job.tivoli_histories.select(:start_datetime, :elapsed_time).map{|p|{ p.start_datetime.strftime('%m/%d'): p.elapsed_time[0..1].to_i*3600+p.elapsed_time[3..4].to_i*60+p.elapsed_time[6..7].to_i }}
tivoli_job.tivoli_histories.group(:start_datetime).count
 tivoli_job.tivoli_histories.select(:start_datetime, :elapsed_time).map{|p|{ "#{p.start_datetime.strftime('%m/%d')}": p.elapsed_time[0..1].to_i*3600+p.elapsed_time[3..4].to_i*60+p.elapsed_time[6..7].to_i }}
c
tivoli_job.tivoli_histories.select(:start_datetime, :elapsed_time).map{|p| {start_datetime: p.start_datetime.strftime('%m/%d'),elapsed_time: p.elapsed_time[0..1].to_i*3600+p.elapsed_time[3..4].to_i*60+p.elapsed_time[6..7].to_i}}
tivoli_job.tivoli_histories.select(:start_datetime, :elapsed_time).map{|p| {start_datetime: p.start_datetime,elapsed_time: p.elapsed_time[0..1].to_i*3600+p.elapsed_time[3..4].to_i*60+p.elapsed_time[6..7].to_i}}
q
c
n
tiv_temp
n
d
c
tiv_temp
ex
n
d.strftime("%m.%d")
d
year
c
n
c
args
dt_end
dt_start
c
args
args[:date_to_import]
c
args[:date_to_import]
c
args[:date_to_import]
args
args[:date_to_import]
c
resource_class.content_columns.each{|col| p col.name.to_sym if col.name == "workstation" || col.name == "stream" || col.name == "job" }
resource_class.content_columns.each{|col| p col.name.to_sym if col.name == "workstation"}
resource_class.content_columns.each{|col| p col.name.to_sym if col.name == "workstation" || "stream" || "job" }
resource_class.content_columns.each{|col| p col.name.to_sym }
resource_class.content_columns.each{|col| column col.name.to_sym }
c
n
c
n
c
n
c
column %s[server_run workstation]
%s[server_run]
%s[server_run workstation].each{|a| column a}
%s[server_run].each{|a| column a}
c
"stream"
stream
:stream
server_run
c
 TivoliHistory.where(status: "ERR").where("start_datetime > ")
tiv_errors
c
new_admin_session_path
n
c
admin_dashboard_path
params
routes
Admin
admin
admin_admin_signin_path
admin_signin_path
quit
Rails.dotenv
Rails.env
quit
Rails
Rails.env
Env
env
