q
Time.at(Time.parse(end_datetime) - Time.parse(start_datetime)).utc.strftime("%H:%M:%S")
Time.parse(end_datetime) - Time.parse(start_datetime)
Time.parse(end_datetime)
Time.at(end_datetime - start_datetime)
end_datetime - start_datetime
end_datetime
Time.at(end_datetime.to_datetime - start_datetime.to_datetime).strftime("%H:%M:%S")
c
n
workstations.each {|w| p w.url}
workstations.each {|w| w.url}
workstations
n
q
Net::SSH.start(@hostname, @username, {:password => @password, :port => @port})
p "Address to login: " + @hostname + ":" + @port.to_s + @username + @password[0..3]
@ssh = Net::SSH.start(@hostname, @username, {:password => @password, :port => @port})
@ssh = Net::SSH.start(@hostname, @username, {:password => @password, :port => @port)
@ssh = Net::SSH.start(@hostname, @port, @username, :password => @password)
q
tivoli_job    = TivoliJob.where(workstation: workstation, job: job).where("stream = ? OR stream_related = ?",stream, stream).first
job           = workstation_and_stream_job[1].split(".")[1]
stream        = workstation_and_stream_job[1].split(".")[0]
workstation   = workstation_and_stream_job[0]
workstation_and_stream_job = line_splitted[7].split("#")
                      job           = workstation_and_stream_job[1].split(".")[1]
                      stream        = workstation_and_stream_job[1].split(".")[0]
                      workstation   = workstation_and_stream_job[0]
line_splitted
c
line_splitted
q
store_job_history_collected_from_server(tiv_data)
q
query
@query
q
Time.at(end_datetime.to_datetime - start_datetime.to_datetime).utc.strftime("%H:%M:%S")
Time.at(end_datetime.to_datetime - start_datetime.to_datetime)
Time.at(end_datetime - start_datetime)
Time.at(end_datetime - start_datetime).utc
start_datetime
end_datetime
Time.at(end_datetime - start_datetime).utc.strftime("%H:%M:%S")
q
c
q
jobs_to_save
c
jobs_to_save
c
e
n
e
n
jobs_to_save
jobs_to_save.count
q
jobs_to_save.first
jobs_to_save
c
(jobs_finished_from_server - jobs_from_file).count
jobs_finished_from_server - jobs_from_file.count
jobs_finished_from_server - jobs_from_file
q
f.collect{|e| e.sub("\n","") unless e.split(" ")[0][0..2] == "RUN"}
f.count
f.collect!{|e| e.sub("\n","") unless e.split(" ")[0][0..2] == "RUN"}.count
f.select{|e| e.split(" ")[0][0..2] != "RUN"}.collect{|e| e.gsub("\n","")}.count
f.select{|e| e.split(" ")[0][0..2] != "RUN"}.collect{|e| e.gsub("\n","")}
f.last
f.last.gsub!("AOK", "RUN")
f.last
f.last.gsub("AOK", "RUN")
f.last.gsub("AOK "RUN")
f.last
f = File.readlines(File.join(Rails.public_path, 'live_tiv_data_'+@hostname+'.txt'))
File.readlines(File.join(Rails.public_path, 'live_tiv_data_'+@hostname+'.txt')).count
jobs_from_file = File.readlines(File.join(Rails.public_path, 'live_tiv_data_'+@hostname+'.txt')).select{|e| e.split(" ")[0][0..2] != "RUN"}.collect{|e| e.sub("\n","")}.count
jobs_from_file = File.readlines(File.join(Rails.public_path, 'live_tiv_data_'+@hostname+'.txt')).select{|e| e.split(" ")[0][0..2] != "RUN"}.collect{|e| e.sub("\n","")}
 File.readlines(File.join(Rails.public_path, 'live_tiv_data_'+@hostname+'.txt')).select{|e| e.sub("\n",""); e.split(" ")[0][0..2] == "RUN";}
File.readlines(File.join(Rails.public_path, 'live_tiv_data_'+@hostname+'.txt')).select{|e| e.sub("\n",""); e.split(" ")[0][0..2] == "RUN"}
File.readlines(File.join(Rails.public_path, 'live_tiv_data_'+@hostname+'.txt')).collect!{|e| e.sub("\n","") unless e.split(" ")[0][0..2] == "RUN"}.first
File.readlines(File.join(Rails.public_path, 'live_tiv_data_'+@hostname+'.txt')).collect!{|e| e.sub("\n","") unless e.split(" ")[0][0..2] == "RUN"}.count
(jobs_finished_from_server - jobs_from_file).count
jobs_from_file[0] == jobs_finished_from_server[0]
jobs_from_file[0]
jobs_finished_from_server[0]
jobs_from_file.collect!{|c| c.sub("\n","")} 
jobs_from_file.sub("\n","")
jobs_finished_from_server[0]
jobs_from_file[0] == jobs_finished_from_server[0]
jobs_from_file[0]
jobs_finished_from_server.count
jobs_from_file.count
(jobs_finished_from_server - jobs_from_file).count
jobs_finished_from_server - jobs_from_file
jobs_from_file
jobs_finished_from_server
jobs_from_file.count
jobs_finished_from_server.count
q
quantity_of_new_jobs > 0
quantity_of_new_jobs
quantity_of_new_jobs -= 1
j
j.pop
j = jobs_new_finished.split("\n").first
jobs_new_finished.split("\n")
jobs_new_finished.split("\n").first
jobs_new_finished
jobs_new_finished.first
jobs_new_finished_splitted
c
quantity_of_new_jobs =1
quantity_of_new_jobs
q
n
tiv
n
q
c
n
c
n
check_tivoli_job(workstation, stream, job, @hostname, log, @ssh)
{ "status" => status, "workstation" => workstation, "stream" => stream, "job" => job, "server_run" => @hostname , "start_datetime" => start_datetime.to_datetime, "end_datetime" => end_datetime.to_datetime, "log" => log, "tivoli_job_id" => tivoli_job_id } #, "user" => user, "script" => script }
n
status
n
t
n
c
status
{ "status" => status, "workstation" => workstation, "stream" => stream, "job" => job, "server_run" => @hostname , "start_datetime" => start_datetime.to_datetime, "end_datetime" => end_datetime.to_datetime, "log" => log, "tivoli_job_id" => tivoli_job_id } #, "user" => user, "script" => script }
query
e
n
tiv
n
q
jobs_new_finished.split("\n").first.pop
jobs_new_finished.split("\n").first
t
n
q
tiv
[ t[0][0..2], t[1]+"/#{year} "+t[2], t[4]+"/#{year} "+t[5], t[7], t[8] ]
n
q
jobs_new_finished.split("\n").first.pop(3)
jobs_new_finished.split("\n").first.pop
jobs_new_finished.split("\n").first.first
jobs_new_finished.split("\n").first
jobs_new_finished.split("\n")
jobs_new_finished.split("\n").pop
jobs_new_finished.first
jobs_new_finished
c
q
c
jobs_new.split("\n").select{|e| e.split(" ")[0][0..2] == "AOK" || e.split(" ")[0][0..2] == "ERR"}.size
File.readlines(File.join(directory, 'live_tiv_data_'+@hostname+'.txt')).select{|e| e.split(" ")[0][0..2] == "AOK" || e.split(" ")[0][0..2] == "ERR"}.size
File.readlines(File.join(directory, 'live_tiv_data_'+@hostname+'.txt')).select{|e| e.split(" ")[0][0..2] == "AOK" || e.split(" ")[0][0..2] == "ERR"}
jobs_new.split("\n").select{|e| e.split(" ")[0][0..2] == "AOK" || e.split(" ")[0][0..2] == "ERR"}.size
jobs_new.split("\n")..select{|e| e.split(" ")[0][0..2] == "AOK" || e.split(" ")[0][0..2] == "ERR"}.size
jobs_new.split("\n").first
jobs_new.split("\n")
File.readlines(File.join(directory, 'live_tiv_data_'+@hostname+'.txt')).select{|e| e.split(" ")[0][0..2] != "AOK"}.size
File.readlines(File.join(directory, 'live_tiv_data_'+@hostname+'.txt')).select{|e| e.split(" ")[0][0..2] != "AOK"}
File.readlines(File.join(directory, 'live_tiv_data_'+@hostname+'.txt')).size
File.readlines(File.join(directory, 'live_tiv_data_'+@hostname+'.txt')).select{|e| e.split(" ")[0][0..2] == "AOK" || e.split(" ")[0][0..2] == "ERR"}.sizeFile.readlines(File.join(directory, 'live_tiv_data_'+@hostname+'.txt'))
File.readlines(File.join(directory, 'live_tiv_data_'+@hostname+'.txt')).select{|e| e.split(" ")[0][0..2] == "AOK" || e.split(" ")[0][0..2] == "ERR"}
File.readlines(File.join(directory, 'live_tiv_data_'+@hostname+'.txt')).first.split(" ").first[0..3]
File.readlines(File.join(directory, 'live_tiv_data_'+@hostname+'.txt')).first.split(" ").first
File.readlines(File.join(directory, 'live_tiv_data_'+@hostname+'.txt')).first.split(" ")
File.readlines(File.join(directory, 'live_tiv_data_'+@hostname+'.txt')).first.first
File.readlines(File.join(directory, 'live_tiv_data_'+@hostname+'.txt')).first
File.readlines(File.join(directory, 'live_tiv_data_'+@hostname+'.txt')).select{|e| e.split(" ")[0] == "AOK" || e.split(" ")[0] == "ERR"}
File.readlines(File.join(directory, 'live_tiv_data_'+@hostname+'.txt')).first
File.readlines(File.join(directory, 'live_tiv_data_'+@hostname+'.txt'))
c
end_datetime
start_datetime
{ "status" => status, "workstation" => workstation, "stream" => stream, "job" => job, "server_run" => @hostname , "start_datetime" => start_datetime.to_datetime, "end_datetime" => end_datetime.to_datetime, "log" => log, "tivoli_job_id" => tivoli_job_id } #, "user" => user, "script" => script }
n
year
n
q
n
tivoli_job_id
n
tiv_mounted
n
year
tiv
n
c
n
quantity_of_new_jobs
tiv
n
c
n
tiv = jobs_new.split("\n").pop
e
n
new_file_size
new_file_size.pop
tiv
tiv = new_file_size.pop
quantity_of_new_jobs
n
quantity_of_new_jobs
n
p arr_new - arr_old
arr_new = jobs_new.split("\n").collect{|c| c.split(" ")[7]}
arr_old = File.readlines(File.join(directory, 'live_tiv_data_'+@hostname+'.txt')).collect{|c| c.split(" ")[7]}
quantity_of_new_jobs
n
q
n
c
Date.today
tst.collect{|c| c}
tst = "oi teste"
jobs_new.split("\n").pop
jobs_new.split("\n").size
File.readlines(File.join(directory, 'live_tiv_data_'+@hostname+'.txt')).size
arr_old.size
arr_old_size
arr_new.size
arr_new - arr_old
arr_old = arr_old.slice(0..(arr_old.size - 3))
arr_old.slice(0..(arr_old.size - 3))
arr_new - arr_old
n
c
arr_old - arr_new
arr_new - arr_old
arr_new = arr_new.slice(0..(arr_new.size - 4))
arr_new - arr_old
arr_old - arr_new
arr_new = arr_new.slice(0..(arr_new.size - 2))
arr_new - arr_old
arr_old - arr_new
arr_new = arr_new.slice(0..arr_new.size - 1)
arr_new.slice(0..arr_new.size - 1)
arr_new.slice[0..(arr_new.size - 1)]
arr_new.slice[0..arr_new.size - 1]
arr_new arr_new.size - 1
arr_new.size - 1
arr_new.size -1
arr_new.size
arr_old - arr_new
